Part a)
What I learned from the 47 minute long video on Venkat Subramaniam could be summarized into three big pieces.
The first being how code should be written and the way people can write code. If our code is not optimized to its fullest potential, its like cutting its
future off. By limiting the code we write, we inadvertently limit ourselves and others. For example, if I give you code that passes the test in this homework
but takes 30000 lines, I think you would hate me and think I hate you. Coding is similar to writing which leads me to my second big point, effective writing.
Based on the book that Venkat got when he was learning english, code should be written for humans to understand and then machines to somewhat get the jist of it.
Code should be self explaining and readable, comments were not created for this reason. Comments were created for the purpose of giving more depth to the code.
The shower head was a perfect example of this, why would you want the shower head to tell you (IN TEXT) what direction to point it to turn it on? Shouldn't
by looking at it explain it enough or is it some sort of alien rocket science that us average humans can't understand? Make code pleasing to the mind, not
cause it to have a stack overflow. Finally, I think the part that hits home from the video was this point. Simple problems, complex solutions. Coding can be
easy in certain cases. However, it's deceiving of what truly lies under the beast. Example being homework 3 for me, the solutions were simple but getting
there was another tip of the iceberg. Overall, I loved the video and hop to see more of them from this class!

Part b)
As mentioned in part a), I struggle a lot with un-complicating certain topics. From new to past material. Certain things just click like recursion
and binary tree. To others like linked list and stack still make my pstd come in like a freight train. But I just need to find help and look at code to understand
them from manipulation. Sort of like math where you do a basic problem, then ramp it up from there. Trial and error isn't too good in coding if you don't know what
exactly is happening. Looking at videos and visual interpretations also help with coping with my brain. What I think is missing is optional problems outside of the book
like creating a tree and finding its height or something along those lines. Aspects that I think improve my learning is doing research about the topics we're doing.
Trying to find other problems and interpret them. Also making study buddies, I've always been the lone wolf type of dude. So for the first time i went out of my bubble.
One question that I have been afraid to ask is when does the class get bad? Like overall this has been one, if not the best class that i have ever taken so far in college.
From the whole experience to the work we do. It isn't bad and when it is, its much more satisfying to complete it. Truly fun and joyful.